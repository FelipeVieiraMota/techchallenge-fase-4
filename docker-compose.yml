version: "3.8"

services:

  ### RabbitMQ ###
  rabbitmq:
    image: rabbitmq:3-management
    container_name: order-management-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservice-network

  
  
  ### Order Management - PostgreSQL ###
  order-management-postgres:
    container_name: order-management-postgres
    image: postgres:latest
    restart: always
    ports:
      - "5432:5432"  # External:Internal (Keep internal as 5432)
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: order_management
    networks:
      - microservice-network
    volumes:
      - order-management-data:/var/lib/postgresql/data  # Separate volume for this DB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  ### Order Management - Application ###
  order-management:
    container_name: order-management-app-container
    image: order-management-app-image
    build:
      context: ./order-management-microservice
      dockerfile: Dockerfile
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      order-management-postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://order-management-postgres:5432/order_management
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
      SPRINGDOC_SWAGGER_UI_PATH: /swagger-ui.html
      SPRING_JPA_HIBERNATE_DDL_AUTO: create
    networks:
      - microservice-network



  ### Delivery Logistic - PostgreSQL ###
  delivery-logistic-postgres:
    container_name: delivery-logistic-postgres
    image: postgres:latest
    restart: always
    ports:
      - "5433:5432"  # External 5433, but internal remains 5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: delivery_logistic
    networks:
      - microservice-network
    volumes:
      - delivery-logistic-data:/var/lib/postgresql/data  # Separate volume for this DB
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  ### Delivery Logistic - Application ###
  delivery-logistic:
    container_name: delivery-logistic-app-container
    image: delivery-logistic-app-image
    build:
      context: ./delivery-logistic-microservice
      dockerfile: Dockerfile
    restart: always
    ports:
      - "8082:8082"
    depends_on:
      delivery-logistic-postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://delivery-logistic-postgres:5432/delivery_logistic
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
      SPRINGDOC_SWAGGER_UI_PATH: /swagger-ui.html
      SPRING_JPA_HIBERNATE_DDL_AUTO: create
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservice-network


  ### Product Catalog - PostgreSQL ###
  product-catalog-postgres:
    container_name: product-catalog-postgres
    image: postgres:latest
    restart: always
    ports:
      - "5434:5432"  # External 5434, but internal remains 5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: product_catalog
    networks:
      - microservice-network
    volumes:
      - product-catalog-data:/var/lib/postgresql/data  # Separate volume for this DB
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  ### Product Catalog - Application ###
  product-catalog:
    container_name: product-catalog-app-container
    image: product-catalog-app-image
    build:
      context: ./product_catalog_microservice
      dockerfile: Dockerfile
    restart: always
    ports:
      - "8084:8084"
    depends_on:
      product-catalog-postgres:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://product-catalog-postgres:5432/product_catalog
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRINGDOC_SWAGGER_UI_PATH: /swagger-ui.html
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservice-network


  ### Client - PostgreSQL ###
  client-postgres:
    container_name: client-postgres
    image: postgres:latest
    restart: always
    ports:
      - "5435:5432"  # External 5434, but internal remains 5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: client
    networks:
      - microservice-network
    volumes:
      - client-data:/var/lib/postgresql/data  # Separate volume for this DB
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  ### Client Catalog - Application ###
  client-catalog:
    container_name: client-app-container
    image: client-app-image
    build:
      context: ./client_microservice
      dockerfile: Dockerfile
    restart: always
    ports:
      - "8085:8085"
    depends_on:
      client-postgres:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://client-postgres:5432/client
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRINGDOC_SWAGGER_UI_PATH: /swagger-ui.html
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservice-network


### Volumes (Separate for Each PostgreSQL Instance) ###
volumes:
  order-management-data:
  delivery-logistic-data:
  product-catalog-data:
  client-data:

### Network ###
networks:
  microservice-network:
    driver: bridge
